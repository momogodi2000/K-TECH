version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ktech-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - TZ=Africa/Douala
    volumes:
      # SSL certificates (when ready for production)
      # - ./ssl/certs:/etc/nginx/ssl:ro
      # Custom error pages
      - ./public/error-pages:/usr/share/nginx/html/error-pages:ro
    networks:
      - ktech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache (for future session management)
  redis:
    image: redis:7-alpine
    container_name: ktech-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ktechredis2025}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ktech-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service (for future database backups)
  backup:
    image: alpine:latest
    container_name: ktech-backup
    volumes:
      - ./backups:/backups
      - redis-data:/data/redis:ro
    environment:
      - TZ=Africa/Douala
    command: >
      sh -c "
        apk add --no-cache tar gzip &&
        while true; do
          echo 'Starting backup...' &&
          tar -czf /backups/redis-backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /data/redis . &&
          echo 'Backup completed' &&
          sleep 86400
        done
      "
    networks:
      - ktech-network
    restart: unless-stopped
    depends_on:
      - redis

networks:
  ktech-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local